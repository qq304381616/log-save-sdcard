
	/** 文件 转 字符串 */
	public static String File2String(File file) throws IOException {
		byte[] buffer = new byte[(int) file.length()];
		DataInputStream input = null;
		try {
			input = new DataInputStream(new FileInputStream(file));
			input.readFully(buffer);
		} finally {
			closeQuietly(input);
		}
		return new String(buffer);
	}

	/** 流 转 字符串 */
	public static String readToEndAsArray(InputStream input) throws IOException {
		DataInputStream dis = new DataInputStream(input);
		byte[] stuff = new byte[1024];
		ByteArrayOutputStream buff = new ByteArrayOutputStream();
		int read = 0;
		while ((read = dis.read(stuff)) != -1) {
			buff.write(stuff, 0, read);
		}
		dis.close();
		return new String(buff.toByteArray());
	}

	/** 字符串 写到 文件 */
	public static void writeFile(File file, String string) throws IOException {
		file.getParentFile().mkdirs();
		DataOutputStream dout = new DataOutputStream(new FileOutputStream(file));
		dout.write(string.getBytes());
		dout.close();
	}

	/** 拷贝流 */
	public static void copyStream(InputStream input, OutputStream output) throws IOException {
		final ReadableByteChannel inputChannel = Channels.newChannel(input);
		final WritableByteChannel outputChannel = Channels.newChannel(output);
		// copy the channels
		fastChannelCopy(inputChannel, outputChannel);
	}

	public static void fastChannelCopy(final ReadableByteChannel src, final WritableByteChannel dest)
			throws IOException {
		final ByteBuffer buffer = ByteBuffer.allocateDirect(16 * 1024);
		while (src.read(buffer) != -1) {
			// prepare the buffer to be drained
			buffer.flip();
			// write to the channel, may block
			dest.write(buffer);
			// If partial transfer, shift remainder down
			// If buffer is empty, same as doing recycle()
			buffer.compact();
		}
		// EOF will leave buffer in fill state
		buffer.flip();
		// make sure the buffer is fully drained.
		while (buffer.hasRemaining()) {
			dest.write(buffer);
		}
	}

	/** 关闭流 */
	public static void closeQuietly(Closeable... closeables) {
		if (closeables == null)
			return;
		for (Closeable closeable : closeables) {
			if (closeable != null) {
				try {
					closeable.close();
				} catch (IOException e) {
				}
			}
		}
	}